diff --git a/.config b/.config
index 4c1b95b..3cd04eb 100644
--- a/.config
+++ b/.config
@@ -37,7 +37,6 @@ CONFIG_ZONE_DMA32=y
 CONFIG_AUDIT_ARCH=y
 CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING=y
 CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC=y
-CONFIG_X86_64_SMP=y
 CONFIG_ARCH_SUPPORTS_UPROBES=y
 CONFIG_FIX_EARLYCON_MEM=y
 CONFIG_PGTABLE_LEVELS=4
@@ -49,6 +48,7 @@ CONFIG_THREAD_INFO_IN_TASK=y
 #
 # General setup
 #
+CONFIG_BROKEN_ON_SMP=y
 CONFIG_INIT_ENV_ARG_LIMIT=32
 CONFIG_CROSS_COMPILE=""
 # CONFIG_COMPILE_TEST is not set
@@ -85,9 +85,6 @@ CONFIG_AUDIT_TREE=y
 #
 CONFIG_GENERIC_IRQ_PROBE=y
 CONFIG_GENERIC_IRQ_SHOW=y
-CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK=y
-CONFIG_GENERIC_PENDING_IRQ=y
-CONFIG_GENERIC_IRQ_MIGRATION=y
 CONFIG_IRQ_DOMAIN=y
 CONFIG_IRQ_DOMAIN_HIERARCHY=y
 CONFIG_GENERIC_IRQ_MATRIX_ALLOCATOR=y
@@ -112,7 +109,6 @@ CONFIG_TICK_ONESHOT=y
 CONFIG_NO_HZ_COMMON=y
 # CONFIG_HZ_PERIODIC is not set
 CONFIG_NO_HZ_IDLE=y
-# CONFIG_NO_HZ_FULL is not set
 # CONFIG_NO_HZ is not set
 CONFIG_HIGH_RES_TIMERS=y
 
@@ -125,7 +121,6 @@ CONFIG_TICK_CPU_ACCOUNTING=y
 CONFIG_BSD_PROCESS_ACCT=y
 CONFIG_BSD_PROCESS_ACCT_V3=y
 # CONFIG_TASKSTATS is not set
-# CONFIG_CPU_ISOLATION is not set
 
 #
 # RCU Subsystem
@@ -141,7 +136,6 @@ CONFIG_BUILD_BIN2C=y
 CONFIG_IKCONFIG=y
 CONFIG_IKCONFIG_PROC=y
 CONFIG_LOG_BUF_SHIFT=17
-CONFIG_LOG_CPU_MAX_BUF_SHIFT=12
 CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT=13
 CONFIG_HAVE_UNSTABLE_SCHED_CLOCK=y
 CONFIG_ARCH_SUPPORTS_NUMA_BALANCING=y
@@ -154,7 +148,6 @@ CONFIG_CGROUPS=y
 # CONFIG_CGROUP_PIDS is not set
 # CONFIG_CGROUP_RDMA is not set
 # CONFIG_CGROUP_FREEZER is not set
-# CONFIG_CPUSETS is not set
 # CONFIG_CGROUP_DEVICE is not set
 # CONFIG_CGROUP_CPUACCT is not set
 # CONFIG_CGROUP_PERF is not set
@@ -212,7 +205,7 @@ CONFIG_MEMBARRIER=y
 # CONFIG_CHECKPOINT_RESTORE is not set
 CONFIG_KALLSYMS=y
 CONFIG_KALLSYMS_ALL=y
-CONFIG_KALLSYMS_ABSOLUTE_PERCPU=y
+# CONFIG_KALLSYMS_ABSOLUTE_PERCPU is not set
 CONFIG_KALLSYMS_BASE_RELATIVE=y
 # CONFIG_BPF_SYSCALL is not set
 # CONFIG_USERFAULTFD is not set
@@ -368,20 +361,15 @@ CONFIG_DEFAULT_IOSCHED="cfq"
 # CONFIG_IOSCHED_BFQ is not set
 CONFIG_UNINLINE_SPIN_UNLOCK=y
 CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y
-CONFIG_MUTEX_SPIN_ON_OWNER=y
-CONFIG_RWSEM_SPIN_ON_OWNER=y
-CONFIG_LOCK_SPIN_ON_OWNER=y
 CONFIG_ARCH_USE_QUEUED_SPINLOCKS=y
-CONFIG_QUEUED_SPINLOCKS=y
 CONFIG_ARCH_USE_QUEUED_RWLOCKS=y
-CONFIG_QUEUED_RWLOCKS=y
 # CONFIG_FREEZER is not set
 
 #
 # Processor type and features
 #
 CONFIG_ZONE_DMA=y
-CONFIG_SMP=y
+# CONFIG_SMP is not set
 CONFIG_X86_FEATURE_NAMES=y
 CONFIG_X86_FAST_FEATURE_TESTS=y
 CONFIG_X86_MPPARSE=y
@@ -417,15 +405,12 @@ CONFIG_DMI=y
 # CONFIG_CALGARY_IOMMU is not set
 CONFIG_SWIOTLB=y
 CONFIG_IOMMU_HELPER=y
-# CONFIG_MAXSMP is not set
-CONFIG_NR_CPUS=8
-CONFIG_SCHED_SMT=y
-CONFIG_SCHED_MC=y
-# CONFIG_SCHED_MC_PRIO is not set
+CONFIG_NR_CPUS=1
 # CONFIG_PREEMPT_NONE is not set
 # CONFIG_PREEMPT_VOLUNTARY is not set
 CONFIG_PREEMPT=y
 CONFIG_PREEMPT_COUNT=y
+CONFIG_UP_LATE_INIT=y
 CONFIG_X86_LOCAL_APIC=y
 CONFIG_X86_IO_APIC=y
 # CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS is not set
@@ -452,7 +437,6 @@ CONFIG_ARCH_DMA_ADDR_T_64BIT=y
 CONFIG_X86_DIRECT_GBPAGES=y
 CONFIG_ARCH_HAS_MEM_ENCRYPT=y
 # CONFIG_AMD_MEM_ENCRYPT is not set
-# CONFIG_NUMA is not set
 CONFIG_ARCH_SPARSEMEM_ENABLE=y
 CONFIG_ARCH_SPARSEMEM_DEFAULT=y
 CONFIG_ARCH_SELECT_MEMORY_MODEL=y
@@ -482,6 +466,7 @@ CONFIG_VIRT_TO_BUS=y
 CONFIG_DEFAULT_MMAP_MIN_ADDR=65536
 # CONFIG_TRANSPARENT_HUGEPAGE is not set
 CONFIG_ARCH_WANTS_THP_SWAP=y
+CONFIG_NEED_PER_CPU_KM=y
 # CONFIG_CLEANCACHE is not set
 # CONFIG_FRONTSWAP is not set
 # CONFIG_CMA is not set
@@ -521,7 +506,6 @@ CONFIG_CRASH_DUMP=y
 CONFIG_PHYSICAL_START=0x1000000
 # CONFIG_RELOCATABLE is not set
 CONFIG_PHYSICAL_ALIGN=0x1000000
-# CONFIG_HOTPLUG_CPU is not set
 # CONFIG_COMPAT_VDSO is not set
 # CONFIG_LEGACY_VSYSCALL_NATIVE is not set
 CONFIG_LEGACY_VSYSCALL_EMULATE=y
@@ -729,15 +713,11 @@ CONFIG_VMWARE_VMCI_VSOCKETS=m
 # CONFIG_NET_SWITCHDEV is not set
 # CONFIG_NET_L3_MASTER_DEV is not set
 # CONFIG_NET_NCSI is not set
-CONFIG_RPS=y
-CONFIG_RFS_ACCEL=y
-CONFIG_XPS=y
 # CONFIG_CGROUP_NET_PRIO is not set
 # CONFIG_CGROUP_NET_CLASSID is not set
 CONFIG_NET_RX_BUSY_POLL=y
 CONFIG_BQL=y
 # CONFIG_BPF_JIT is not set
-CONFIG_NET_FLOW_LIMIT=y
 
 #
 # Network testing
@@ -1913,7 +1893,6 @@ CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE=400
 CONFIG_ARCH_HAS_DEBUG_VIRTUAL=y
 # CONFIG_DEBUG_VIRTUAL is not set
 CONFIG_DEBUG_MEMORY_INIT=y
-# CONFIG_DEBUG_PER_CPU_MAPS is not set
 CONFIG_HAVE_DEBUG_STACKOVERFLOW=y
 # CONFIG_DEBUG_STACKOVERFLOW is not set
 CONFIG_HAVE_ARCH_KASAN=y
@@ -2113,7 +2092,6 @@ CONFIG_CRYPTO_MANAGER2=y
 # CONFIG_CRYPTO_GF128MUL is not set
 # CONFIG_CRYPTO_NULL is not set
 CONFIG_CRYPTO_NULL2=y
-# CONFIG_CRYPTO_PCRYPT is not set
 CONFIG_CRYPTO_WORKQUEUE=y
 # CONFIG_CRYPTO_CRYPTD is not set
 # CONFIG_CRYPTO_MCRYPTD is not set
@@ -2302,7 +2280,6 @@ CONFIG_HAS_IOPORT_MAP=y
 CONFIG_HAS_DMA=y
 # CONFIG_DMA_NOOP_OPS is not set
 # CONFIG_DMA_VIRT_OPS is not set
-CONFIG_CPU_RMAP=y
 CONFIG_DQL=y
 CONFIG_GLOB=y
 # CONFIG_GLOB_SELFTEST is not set
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 6a53262..20f538d 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -247,6 +247,10 @@ extern struct cred init_cred;
 		.run_list	= LIST_HEAD_INIT(tsk.rt.run_list),	\
 		.time_slice	= RR_TIMESLICE,				\
 	},								\
+	.dummy_se = {							\
+		.run_list 	= LIST_HEAD_INIT(tsk.dummy_se.run_list),\
+		.time_slice 	= 0,					\
+	},								\
 	.tasks		= LIST_HEAD_INIT(tsk.tasks),			\
 	INIT_PUSHABLE_TASKS(tsk)					\
 	INIT_CGROUP_SCHED(tsk)						\
diff --git a/include/linux/sched.h b/include/linux/sched.h
index d258826..65b6fe9 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -429,6 +429,11 @@ struct sched_rt_entity {
 #endif
 } __randomize_layout;
 
+struct sched_dummy_entity {
+	struct list_head run_list;
+	unsigned int time_slice;
+};
+
 struct sched_dl_entity {
 	struct rb_node			rb_node;
 
@@ -563,6 +568,7 @@ struct task_struct {
 	const struct sched_class	*sched_class;
 	struct sched_entity		se;
 	struct sched_rt_entity		rt;
+	struct sched_dummy_entity dummy_se;
 #ifdef CONFIG_CGROUP_SCHED
 	struct task_group		*sched_task_group;
 #endif
@@ -1105,6 +1111,22 @@ struct task_struct {
 	 */
 };
 
+#define MIN_DUMMY_PRIO 131
+#define MAX_DUMMY_PRIO 135
+#define NUM_DUMMY_PRIO 5
+
+static inline int dummy_prio(int prio)
+{
+	if (prio >= MIN_DUMMY_PRIO && prio <= MAX_DUMMY_PRIO)
+		return 1;
+	return 0;
+}
+
+static inline int dummy_task(struct task_struct *p)
+{
+	return dummy_prio(p->prio);
+}
+
 static inline struct pid *task_pid(struct task_struct *task)
 {
 	return task->pids[PIDTYPE_PID].pid;
diff --git a/include/linux/sched/sysctl.h b/include/linux/sched/sysctl.h
index 1c1a151..5ca6c3e 100644
--- a/include/linux/sched/sysctl.h
+++ b/include/linux/sched/sysctl.h
@@ -24,6 +24,9 @@ extern unsigned int sysctl_sched_min_granularity;
 extern unsigned int sysctl_sched_wakeup_granularity;
 extern unsigned int sysctl_sched_child_runs_first;
 
+extern unsigned int sysctl_sched_dummy_timeslice;
+extern unsigned int sysctl_sched_dummy_age_threshold;
+
 enum sched_tunable_scaling {
 	SCHED_TUNABLESCALING_NONE,
 	SCHED_TUNABLESCALING_LOG,
diff --git a/kernel/sched/Makefile b/kernel/sched/Makefile
index e2f9d4f..5a07b64 100644
--- a/kernel/sched/Makefile
+++ b/kernel/sched/Makefile
@@ -17,7 +17,7 @@ CFLAGS_core.o := $(PROFILING) -fno-omit-frame-pointer
 endif
 
 obj-y += core.o loadavg.o clock.o cputime.o
-obj-y += idle_task.o fair.o rt.o deadline.o
+obj-y += idle_task.o fair.o rt.o deadline.o dummy.o
 obj-y += wait.o wait_bit.o swait.o completion.o idle.o
 obj-$(CONFIG_SMP) += cpupri.o cpudeadline.o topology.o stop_task.o
 obj-$(CONFIG_SCHED_AUTOGROUP) += autogroup.o
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a7bf32a..ed71cab 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -2382,7 +2382,10 @@ int sched_fork(unsigned long clone_flags, struct task_struct *p)
 	} else if (rt_prio(p->prio)) {
 		p->sched_class = &rt_sched_class;
 	} else {
-		p->sched_class = &fair_sched_class;
+		if (dummy_prio(p->prio))
+			p->sched_class = &dummy_sched_class;
+		else
+			p->sched_class = &fair_sched_class;
 	}
 
 	init_entity_runnable_average(&p->se);
@@ -3754,7 +3757,11 @@ void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task)
 			p->dl.dl_boosted = 0;
 		if (rt_prio(oldprio))
 			p->rt.timeout = 0;
-		p->sched_class = &fair_sched_class;
+
+		if (dummy_prio(prio))
+			p->sched_class = &dummy_sched_class;
+		else
+			p->sched_class = &fair_sched_class;
 	}
 
 	p->prio = prio;
@@ -3819,6 +3826,11 @@ void set_user_nice(struct task_struct *p, long nice)
 	p->prio = effective_prio(p);
 	delta = p->prio - old_prio;
 
+	if (dummy_prio(p->prio))
+		p->sched_class = &dummy_sched_class;
+	else
+		p->sched_class = &fair_sched_class;
+
 	if (queued) {
 		enqueue_task(rq, p, ENQUEUE_RESTORE | ENQUEUE_NOCLOCK);
 		/*
@@ -3993,7 +4005,12 @@ static void __setscheduler(struct rq *rq, struct task_struct *p,
 	else if (rt_prio(p->prio))
 		p->sched_class = &rt_sched_class;
 	else
-		p->sched_class = &fair_sched_class;
+	{
+		if (dummy_prio(p->prio))
+			p->sched_class = &dummy_sched_class;
+		else
+			p->sched_class = &fair_sched_class;
+	}
 }
 
 /*
@@ -5895,6 +5912,7 @@ void __init sched_init(void)
 		init_cfs_rq(&rq->cfs);
 		init_rt_rq(&rq->rt);
 		init_dl_rq(&rq->dl);
+		init_dummy_rq(&rq->dummy);
 #ifdef CONFIG_FAIR_GROUP_SCHED
 		root_task_group.shares = ROOT_TASK_GROUP_LOAD;
 		INIT_LIST_HEAD(&rq->leaf_cfs_rq_list);
diff --git a/kernel/sched/dummy.c b/kernel/sched/dummy.c
new file mode 100644
index 0000000..22dfebd
--- /dev/null
+++ b/kernel/sched/dummy.c
@@ -0,0 +1,244 @@
+/*
+ * Dummy scheduling class, mapped to range a of 5 levels of SCHED_NORMAL policy
+ */
+
+#include "sched.h"
+
+/*
+ * Timeslice and age threshold are repsented in jiffies. Default timeslice
+ * is 100ms. Both parameters can be tuned from /proc/sys/kernel.
+ */
+
+#define DUMMY_TIMESLICE		(100 * HZ / 1000)
+#define DUMMY_AGE_THRESHOLD	(3 * DUMMY_TIMESLICE)
+
+unsigned int sysctl_sched_dummy_timeslice = DUMMY_TIMESLICE;
+static inline unsigned int get_timeslice(void)
+{
+	return sysctl_sched_dummy_timeslice;
+}
+
+unsigned int sysctl_sched_dummy_age_threshold = DUMMY_AGE_THRESHOLD;
+static inline unsigned int get_age_threshold(void)
+{
+	return sysctl_sched_dummy_age_threshold;
+}
+
+/*
+ * Init
+ */
+
+void init_dummy_rq(struct dummy_rq *dummy_rq)
+{
+	size_t i;
+	for(i = 0; i < NUM_DUMMY_PRIO; i++)
+		INIT_LIST_HEAD(&dummy_rq->queue[i]);
+}
+
+/*
+ * Helper functions
+ */
+
+static inline struct task_struct *dummy_task_of(struct sched_dummy_entity *dummy_se)
+{
+	return container_of(dummy_se, struct task_struct, dummy_se);
+}
+
+static inline size_t dummy_prio_level(struct task_struct *p)
+{
+	return p->prio - MIN_DUMMY_PRIO;
+}
+
+static inline void _enqueue_task_dummy(struct rq *rq, struct task_struct *p)
+{
+	struct sched_dummy_entity *dummy_se = &p->dummy_se;
+	struct list_head *queue = &rq->dummy.queue[dummy_prio_level(p)];
+	list_add_tail(&dummy_se->run_list, queue);
+}
+
+static inline void _dequeue_task_dummy(struct task_struct *p)
+{
+	struct sched_dummy_entity *dummy_se = &p->dummy_se;
+	list_del_init(&dummy_se->run_list);
+}
+
+/*
+ * Scheduling class functions to implement
+ */
+
+static void enqueue_task_dummy(struct rq *rq, struct task_struct *p, int flags)
+{
+	_enqueue_task_dummy(rq, p);
+	add_nr_running(rq,1);
+}
+
+static void dequeue_task_dummy(struct rq *rq, struct task_struct *p, int flags)
+{
+	_dequeue_task_dummy(p);
+	sub_nr_running(rq,1);
+}
+
+static void yield_task_dummy(struct rq *rq)
+{
+}
+
+static void check_preempt_curr_dummy(struct rq *rq, struct task_struct *p, int flags)
+{
+	if(p->prio < rq->curr->prio) {
+		resched_curr(rq);
+		return;
+	}
+}
+
+static struct task_struct *pick_next_task_dummy(struct rq *rq, struct task_struct* prev, struct rq_flags *rf)
+{
+	struct sched_dummy_entity *next;
+	size_t i;
+	struct list_head *queue;
+
+	for(i = 0; i < NUM_DUMMY_PRIO; i++) {
+		queue = &rq->dummy.queue[i];
+		if(!list_empty(queue)) {
+			next = list_first_entry(queue, struct sched_dummy_entity, run_list);
+                	put_prev_task(rq, prev);
+			return dummy_task_of(next);
+		}
+	}
+
+	return NULL;
+}
+
+static void put_prev_task_dummy(struct rq *rq, struct task_struct *prev)
+{
+}
+
+static void set_curr_task_dummy(struct rq *rq)
+{
+}
+
+static void task_tick_dummy(struct rq *rq, struct task_struct *curr, int queued)
+{
+	struct sched_dummy_entity *dummy_se = &curr->dummy_se;
+	struct list_head *queue = &rq->dummy.queue[dummy_prio_level(curr)];
+
+	if(++(dummy_se->time_slice) < get_timeslice())
+		return;
+	/* Time slice expired */
+	dummy_se->time_slice = 0;
+
+	list_del_init(&dummy_se->run_list);
+	list_add_tail(&dummy_se->run_list, queue);
+
+	resched_curr(rq);
+}
+
+static void switched_from_dummy(struct rq *rq, struct task_struct *p)
+{
+}
+
+/*
+ * Make rescheduling decisions once sched class is changed
+ * Not called by set_user_nice()
+ * 
+ * A little bit duplicated with prio_changed, but this is due
+ * to the function check_class_changed() which will ignore
+ * prio_changed if sched class is changed
+ */
+static void switched_to_dummy(struct rq *rq, struct task_struct *p)
+{
+	// if task is not runnable, don't bother to reschedule
+	if(!task_on_rq_queued(p))
+		return;
+	
+	/*
+	 * Reschedule if
+	 * 1. Task is running (We always move from higher priority sched classes to dummy)
+	 * 2. Task is ready and priority is increased to be larger than current task
+	 */
+	if(rq->curr == p) {
+		resched_curr(rq);
+	} else {
+		if(p->prio < rq->curr->prio)
+			resched_curr(rq);
+	}
+}
+
+/*
+ * Make rescheduling decisions once priority changed
+ * Not called if sched class is also changed
+ * Not called by set_user_nice()
+ */
+static void prio_changed_dummy(struct rq*rq, struct task_struct *p, int oldprio)
+{
+	// Set time
+	// if task is not runnable, don't bother to reschedule
+	if(!task_on_rq_queued(p))
+		return;
+	
+	/*
+	 * Reschedule if
+	 * 1. Task is running and priority is lowered
+	 * 2. Task is ready and priority is increased to be larger than current task
+	 */
+	if(rq->curr == p) {
+		if(p->prio > oldprio)
+			resched_curr(rq);
+	} else {
+		if(p->prio < rq->curr->prio)
+			resched_curr(rq);
+	}
+}
+
+static unsigned int get_rr_interval_dummy(struct rq* rq, struct task_struct *p)
+{
+	return get_timeslice();
+}
+#ifdef CONFIG_SMP
+/*
+ * SMP related functions	
+ */
+
+static inline int select_task_rq_dummy(struct task_struct *p, int cpu, int sd_flags, int wake_flags)
+{
+	int new_cpu = smp_processor_id();
+	
+	return new_cpu; //set assigned CPU to zero
+}
+
+
+static void set_cpus_allowed_dummy(struct task_struct *p,  const struct cpumask *new_mask)
+{
+}
+#endif
+/*
+ * Scheduling class
+ */
+static void update_curr_dummy(struct rq*rq)
+{
+}
+const struct sched_class dummy_sched_class = {
+	.next			= &idle_sched_class,
+	.enqueue_task		= enqueue_task_dummy,
+	.dequeue_task		= dequeue_task_dummy,
+	.yield_task		= yield_task_dummy,
+
+	.check_preempt_curr	= check_preempt_curr_dummy,
+	
+	.pick_next_task		= pick_next_task_dummy,
+	.put_prev_task		= put_prev_task_dummy,
+
+#ifdef CONFIG_SMP
+	.select_task_rq		= select_task_rq_dummy,
+	.set_cpus_allowed	= set_cpus_allowed_dummy,
+#endif
+
+	.set_curr_task		= set_curr_task_dummy,
+	.task_tick		= task_tick_dummy,
+
+	.switched_from		= switched_from_dummy,
+	.switched_to		= switched_to_dummy,
+	.prio_changed		= prio_changed_dummy,
+
+	.get_rr_interval	= get_rr_interval_dummy,
+	.update_curr		= update_curr_dummy,
+};
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 26a71eb..41fdad5 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -4250,6 +4250,7 @@ pick_next_entity(struct cfs_rq *cfs_rq, struct sched_entity *curr)
 		left = curr;
 
 	se = left; /* ideally we run the leftmost entity */
+	BUG_ON(!se);
 
 	/*
 	 * Avoid running the skip buddy, if running something else can
@@ -6625,7 +6626,8 @@ pick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf
 
 again:
 	if (!cfs_rq->nr_running)
-		goto idle;
+		return NULL;
+		//goto idle;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	if (prev->sched_class != &fair_sched_class)
@@ -9893,7 +9895,7 @@ static unsigned int get_rr_interval_fair(struct rq *rq, struct task_struct *task
  * All the scheduling class methods:
  */
 const struct sched_class fair_sched_class = {
-	.next			= &idle_sched_class,
+	.next			= &dummy_sched_class,
 	.enqueue_task		= enqueue_task_fair,
 	.dequeue_task		= dequeue_task_fair,
 	.yield_task		= yield_task_fair,
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 74b5727..1a5a99d 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -602,6 +602,10 @@ struct dl_rq {
 	u64 bw_ratio;
 };
 
+ struct dummy_rq {
+  	struct list_head queue[NUM_DUMMY_PRIO];
+ };
+
 #ifdef CONFIG_SMP
 
 static inline bool sched_asym_prefer(int a, int b)
@@ -712,6 +716,7 @@ struct rq {
 	struct cfs_rq cfs;
 	struct rt_rq rt;
 	struct dl_rq dl;
+	struct dummy_rq dummy;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	/* list of leaf cfs_rq on this cpu: */
@@ -1518,6 +1523,7 @@ extern const struct sched_class stop_sched_class;
 extern const struct sched_class dl_sched_class;
 extern const struct sched_class rt_sched_class;
 extern const struct sched_class fair_sched_class;
+extern const struct sched_class dummy_sched_class;
 extern const struct sched_class idle_sched_class;
 
 
@@ -2008,6 +2014,7 @@ print_numa_stats(struct seq_file *m, int node, unsigned long tsf,
 extern void init_cfs_rq(struct cfs_rq *cfs_rq);
 extern void init_rt_rq(struct rt_rq *rt_rq);
 extern void init_dl_rq(struct dl_rq *dl_rq);
+extern void init_dummy_rq(struct dummy_rq *dummy_rq);
 
 extern void cfs_bandwidth_usage_inc(void);
 extern void cfs_bandwidth_usage_dec(void);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 557d467..6b212c7 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -338,6 +338,20 @@ static struct ctl_table kern_table[] = {
 		.extra1		= &min_wakeup_granularity_ns,
 		.extra2		= &max_wakeup_granularity_ns,
 	},
+	{
+		.procname       = "sched_dummy_timeslice",
+		.data		= &sysctl_sched_dummy_timeslice,
+		.maxlen		= sizeof(unsigned int),
+		.mode 		= 0644,
+		.proc_handler	= proc_dointvec,
+	},
+	{
+		.procname 	= "sched_dummy_age_threshold",
+		.data		= &sysctl_sched_dummy_age_threshold,
+		.maxlen		= sizeof(unsigned int),
+		.mode 		= 0644,
+		.proc_handler 	= proc_dointvec,
+	},
 #ifdef CONFIG_SMP
 	{
 		.procname	= "sched_tunable_scaling",

diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 448ac21..38b16dd 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -391,3 +391,5 @@
 382	i386	pkey_free		sys_pkey_free
 383	i386	statx			sys_statx
 384	i386	arch_prctl		sys_arch_prctl			compat_sys_arch_prctl
+385	i386	get_unique_id		sys_get_unique_id
+386	i386	get_child_pids		sys_get_child_pids
\ No newline at end of file
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 5aef183..2308976 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -339,6 +339,8 @@
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
 332	common	statx			sys_statx
+333	common	get_unique_id		sys_get_unique_id
+334	common	get_child_pids		sys_get_child_pids
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a78186d..18d68c4 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -941,4 +941,7 @@ asmlinkage long sys_pkey_free(int pkey);
 asmlinkage long sys_statx(int dfd, const char __user *path, unsigned flags,
 			  unsigned mask, struct statx __user *buffer);
 
+asmlinkage long sys_get_unique_id(int *uuid);
+asmlinkage long sys_get_child_pids(pid_t *list, size_t limit, size_t *num_children);
+
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index 172d151d..ed6c909 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -3,7 +3,8 @@
 # Makefile for the linux kernel.
 #
 
-obj-y     = fork.o exec_domain.o panic.o \
+obj-y     = get_unique_id.o get_child_pids.o \
+	    fork.o exec_domain.o panic.o \
 	    cpu.o exit.o softirq.o resource.o \
 	    sysctl.o sysctl_binary.o capability.o ptrace.o user.o \
 	    signal.o sys.o umh.o workqueue.o pid.o task_work.o \
diff --git a/kernel/get_child_pids.c b/kernel/get_child_pids.c
new file mode 100644
index 0000000..e94fbfd
--- /dev/null
+++ b/kernel/get_child_pids.c
@@ -0,0 +1,80 @@
+#include <linux/linkage.h>
+#include <linux/types.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+#include <linux/uaccess.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/sched/task.h>
+#include <linux/rwlock.h>
+
+/*
+ * Traversing all the descendents of curr_task,
+ * store their PIDs into list(in kernel sapce)
+ */
+static void store_descendent_pid(pid_t *list, size_t limit, size_t *num_descendent, struct task_struct *curr_task)
+{
+	struct task_struct *child;
+	list_for_each_entry(child, &curr_task->children, sibling) {
+		/* Try to store child PID */
+		if (*num_descendent < limit)
+			*(list + *num_descendent) = child->pid;
+		(*num_descendent)++;
+		/* Traversing descendents of child */
+		store_descendent_pid(list, limit, num_descendent, child);
+	}
+}
+
+asmlinkage long sys_get_child_pids(pid_t *list, size_t limit, size_t *num_children)
+{
+	size_t child_num;
+	pid_t *pid_buf;
+	long ret;
+
+	/* Check memory address validity */
+	if (!access_ok(VERIFY_WRITE, num_children, sizeof(size_t)))
+		return -EFAULT;
+	if (!access_ok(VERIFY_WRITE, list, limit * sizeof(size_t)))
+		if (limit != 0 || list != NULL)
+			return -EFAULT;
+
+	/*
+	 * Get and store PIDs of descendents into list
+	 * Count number of descendents
+	 *
+	 * To protect tasklist we need to use tasklist_lock
+	 * here, which is a spinlock. put_user() can sleep
+	 * thus can't be used to store PIDs directly when
+	 * traversing the task lists. As a solution a pid_buf
+	 * is used to store PIDs temporarily which will be copied
+	 * to the userspace later
+	 *
+	 */
+	pid_buf = kmalloc(limit * sizeof(pid_t), GFP_KERNEL);
+	child_num = 0;
+
+	read_lock(&tasklist_lock);
+	store_descendent_pid(pid_buf, limit, &child_num, current);
+	read_unlock(&tasklist_lock);
+
+	/* Store number of children */
+	if (put_user(child_num, num_children) != 0)
+		return -EFAULT;
+
+	/* Copy PIDs to userspace */
+	if (limit == 0) {
+		ret = 0;
+	} else if (limit >= child_num) {
+		ret = copy_to_user(list, pid_buf, child_num * sizeof(pid_t));
+	} else {
+		if (copy_to_user(list, pid_buf, limit * sizeof(pid_t)) != 0)
+			ret = -EFAULT;
+		else
+			ret = -ENOBUFS;
+	}
+
+	if (pid_buf)
+		kfree(pid_buf);
+
+	return ret;
+}
diff --git a/kernel/get_unique_id.c b/kernel/get_unique_id.c
new file mode 100644
index 0000000..b5d6d23
--- /dev/null
+++ b/kernel/get_unique_id.c
@@ -0,0 +1,13 @@
+#include <linux/linkage.h>
+#include <linux/uaccess.h>
+#include <linux/atomic.h>
+
+/* Atomic counter */
+static atomic_t uuid_gen = ATOMIC_INIT(0);
+
+asmlinkage long sys_get_unique_id(int *uuid)
+{
+	/* Atomic increment and return the counter value */
+	int val = atomic_inc_return(&uuid_gen);
+	return put_user(val, uuid);
+}
